<?php
/**
 * Run scheduled vulnerability cleanups.
 *
 * @package soter
 */

namespace SSNepenthe\Soter\Tasks;

use WP_Query;
use SSNepenthe\Soter\Register_Vulnerability_Post_Type;

if ( ! defined( 'ABSPATH' ) ) {
	die;
}

/**
 * This class handles garbage collecting old vulnerability posts since they are
 * technically only needed while the site remains vulnerable in order to display the
 * various notices to administrators.
 */
class Vulnerability_Garbage_Collection {
	/**
	 * List of IDs of vulnerabilities that should not be deleted.
	 *
	 * @var int[]
	 */
	protected $vuln_ids;

	/**
	 * Class constructor.
	 *
	 * @param int[] $vuln_ids List of IDs of vulnerabilities not to delete.
	 */
	public function __construct( array $vuln_ids = [] ) {
		$this->vuln_ids = array_map( 'absint', $vuln_ids );
	}

	/**
	 * Deletes all vulnerability posts which have a soter_id meta value that is not
	 * present in the list of vulnerability IDs passed to the class constructor. In
	 * effect this means that when a site is updated and no longer affected by a
	 * given vulnerability, that vulnerability gets removed from the database.
	 */
	public function run_task() {
		$query = new WP_Query( [
			'fields' => 'ids',
			'meta_query' => [
				[
					'compare' => 'NOT IN',
					'key' => 'soter_id',
					'type' => 'NUMERIC',
					'value' => $this->vuln_ids,
				],
			],
			'no_found_rows' => true,
			'post_type' => Register_Vulnerability_Post_Type::POST_TYPE,
			'post_status' => Register_Vulnerability_Post_Type::POST_STATUS,
			'posts_per_page' => Register_Vulnerability_Post_Type::POSTS_PER_PAGE,
			'update_post_meta_cache' => false,
			'update_post_term_cache' => false,
		] );

		// Can be empty.
		foreach ( $query->posts as $id ) {
			wp_delete_post( $id );
		}
	}
}
