<?php
/**
 * Package vulnerability object.
 *
 * @package soter
 */

namespace SSNepenthe\Soter\WPVulnDB;

use stdClass;

/**
 * This class is a simple wrapper for a vulnerability as reported by WPVulnDB.
 */
class Vulnerability implements \JsonSerializable {
	/**
	 * JSON decoded vulnerability.
	 *
	 * @var stdClass
	 */
	protected $object;

	protected $timestamps = [];

	/**
	 * Constructor
	 *
	 * @param stdClass $vulnerability JSON decoded vulnerability object.
	 *
	 * @todo  Consider trimming all vars on object (or maybe in getter).
	 */
	public function __construct( stdClass $vulnerability ) {
		$this->object = $vulnerability;

		foreach ( [ 'created_at', 'published_date', 'updated_at' ] as $timestamp ) {
			// It looks like published_date is often null.
			if ( isset( $this->object->{$timestamp} ) ) {
				$this->timestamps[ $timestamp ] = new \DateTime(
					$this->object->{$timestamp}
				);
			}
		}
	}

	/**
	 * Provides access to vulnerability properties.
	 *
	 * @param  string $key Property name.
	 *
	 * @return mixed
	 */
	public function __get( $key ) {
		if ( ! isset( $this->object->{$key} ) ) {
			return null;
		}

		if ( in_array(
			$key,
			[ 'created_at', 'published_date', 'updated_at' ],
			true
		) ) {
			return $this->timestamps[ $key ];
		}

		return $this->object->{$key};
	}

	/**
	 * Determine whether this vulnerability affects a given version.
	 *
	 * @param  string $version Package version.
	 *
	 * @return bool
	 *
	 * @throws  \InvalidArgumentException When version is not a string.
	 */
	public function affects_version( $version ) {
		$version = (string) $version;

		return is_null( $this->object->fixed_in ) ||
			   version_compare( $version, $this->object->fixed_in, '<' );
	}

	/**
	 * Return the underlying stdClass vulnerability object for json_encode support.
	 *
	 * @return stdClass
	 */
	public function jsonSerialize() {
		return $this->object;
	}

	public function to_array() {
		$vars = get_object_vars( $this->object );

		foreach ( [ 'created_at', 'updated_at', 'published_date' ] as $timestamp ) {
			if ( isset( $vars[ $timestamp ] ) ) {
				// @todo Best format? Using d M Y in Checker::get_messages().
				$vars[ $timestamp ] = $this->{$timestamp}->format( 'd F Y' );
			}
		}

		return $vars;
	}
}
