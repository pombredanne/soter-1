<?php
/**
 * Package vulnerability object.
 *
 * @package soter
 */

namespace SSNepenthe\Soter\WPScan;

use DateTime;

if ( ! defined( 'ABSPATH' ) ) {
	die;
}

/**
 * This class is a simple wrapper for a vulnerability as reported by the WPScan API.
 */
class Vulnerability implements \JsonSerializable {
	/**
	 * JSON decoded vulnerability.
	 *
	 * @var  array
	 */
	protected $data;

	/**
	 * Cache of DateTime instances for the various vulnerability timestamps.
	 *
	 * @var  DateTime[]
	 */
	protected $timestamps = [];

	/**
	 * Class constructor.
	 *
	 * @param array $vulnerability JSON decoded vulnerability array.
	 */
	public function __construct( array $vulnerability ) {
		foreach ( $vulnerability as $key => $value ) {
			if ( is_string( $value ) ) {
				$vulnerability[ $key ] = trim( $value );
			}
		}

		$this->data = $vulnerability;

		foreach ( [ 'created_at', 'published_date', 'updated_at' ] as $timestamp ) {
			// It looks like published_date is often null.
			if ( isset( $this->data[ $timestamp ] ) ) {
				$this->timestamps[ $timestamp ] = new DateTime(
					$this->data[ $timestamp ]
				);
			}
		}
	}

	/**
	 * Returns the vulnerability ID when object is requested as a string. This is
	 * intended solely for use by array_unique.
	 *
	 * @return string
	 */
	public function __toString() {
		return (string) $this->id;
	}

	/**
	 * Provides access to vulnerability properties.
	 */
	/**
	 * Magic getter - proxies all property requests to timestamps or data arrays.
	 *
	 * @param  string $key Property name.
	 *
	 * @return mixed
	 */
	public function __get( $key ) {
		if ( ! isset( $this->data[ $key ] ) ) {
			return null;
		}

		if ( in_array(
			$key,
			[ 'created_at', 'published_date', 'updated_at' ],
			true
		) ) {
			return $this->timestamps[ $key ];
		}

		return $this->data[ $key ];
	}

	/**
	 * Check whether this vulnerabilty affects a given package version.
	 *
	 * @param  string $version Package version.
	 *
	 * @return bool
	 */
	public function affects_version( $version ) {
		$version = (string) $version;

		return is_null( $this->data['fixed_in'] ) ||
			   version_compare( $version, $this->data['fixed_in'], '<' );
	}

	/**
	 * Data getter.
	 *
	 * @return array
	 */
	public function get_data() {
		return $this->data;
	}

	/**
	 * Return the underlying vulnerability array for json_encode support.
	 *
	 * @return array
	 */
	public function jsonSerialize() {
		return $this->get_data();
	}
}
